>Pair Programming[이수영,원준서]

  #논의주제1: 프로그래밍언어(4p): 기계어, 어셈블리어, 고급언어
이수영)
기계어: 0과 1로 표현되며, 컴파일러가 필요한 고급언어와 달리 컴퓨터가 바로 이해할 수 있는 언어
어셈블리어: 사람이 기계어로 코드를 프로그래밍하기 어려우니, 고급언어가 있기 이전에 기계어에 대응되는 내용을 LOAD, ADD와 같은 것으로 짤 수 있게 된 언어. 고급언어가 활발하게 이용되기 전에 프로그래밍에 사용됐다.
고급언어: 현재 자바나 C++과 같은 언어로, 사람이 기계어보다 더 직관적으로 내용을 이해하고 작성할 수 있다. 어셈블리어보다 코드를 더 간단하게 작성할 수 있다. 컴파일러를 통해 기계어로 변환된다.

원준서)
기계어: 0, 1의 이진수로 구성된 언어로, 컴퓨터 CPU는 본질적으로 기계어만 처리 가능하다.
어셈블리어: 기계어가 어려워 기계어의 명령을 처리할 수 있는 어셈블리어가 나타났다.
고급언어: 이후 c/c++, java 등과 같은 사람이 이해하기 쉽고 복잡한 작업, 자료구조, 알고리즘을 표현할 수 있는 고급 언어가 나타나게 되었다.


  #논의주제2: 객체지향의 특성(캡슐화, 상속, 다형성)
원준서)
캡슐화: 데이터를 캡슐로 감싸 외부의 접근으로부터 데이터를 보호하는 특성이다.
상속: 자식이 부모에게 유전자를 물려받는것과 비슷. 상속 관계가 되어 자식 클래스에 선언된 멤버 뿐만 아니라 부모 클래스에 선언된 멤버들도 함꼐 가지고 탄생한다.
다형성: 같은 연산자가 같은 기능이라도 다르게 사용될 수 있다. 예를 들어 + 연산자는 숫자와 숫자를 더할 땐 덧셈 연산자로 쓰이고, 단어와 단어가 연결될 때는 단어가 연결되면서 합쳐지는 방식으로 사용된다.

이수영)
캡슐화: 클래스도 하나의 캡슐이라고 볼 수 있는데, 변수와 함수 등을 하나의 클래스 안에 캡슐처럼 감싸서 데이터를 보호할 수 있다.
상속: 부모 클래스의 속성을 자식 클래스가 이어받는 것, 동물-고양이,강아지처럼 동물의 속성을 모두 가지고 있되, 내는 소리가 다르다.  부모 클래스의 속성을 공통되게 가지고 있는데, 자식 클래스 각기 고유한 차이가 있는 것(강의를 다 들은 이후에 상속과 다형성 개념이 모호했다는 점을 알게 되었습니다.)
다형성: 같은 연산인데도 다양하게 쓰일 수 있다. 한 번의 코드로 다양한 기능을 여러번 사용할 수 있다는 장점이 있다. 각각의 기능을 매번 짜는 게 아니라 한번 작성하면 반복할 수 있고, 다른 매개변수로 재정의될 수도 있다는 점에서 효율적이다.


  #논의주제3: 객체지향 프로그래밍(절차지향 프로그래밍과 비교하며 함께 논의)
절차지향 프로그래밍은 프로그램을 작성할 떄 실행하려고 하는 순서대로 작성한다.
반면, 객체지향 프로그래밍은 각 객체들을 정의하고, 그 객체들간의 상호작용의 형태로 구현한다.
프로그램을 순서대로 작성해야 하는 절차지향과는 달리, 객체지향은 객체들간의 상호작용으로 구현되기에 객체지향을 통해 절차지향의 한계를 극복할 수 있는 것 같다.
순서대로 진행되는 절차지향은 중간에 변수가 발생하면 해결하기 어렵고,
객체지향은 중간에 변수가 발생하여도 유동성있게 해결할 수 있고, 대처할 수 있다.
강의실에 들어온다->수업을 듣는다와 같이 절차지향은 순서대로 진행되며, 강의 중간에 변수가 발생하거나 이전으로 돌아가고 싶을 때 돌이킬 수가 없다는 한계가 있다.
반면, 객체지향은 중간에 변수가 발생해도 유동성있게 문제점을 해결할 수 있다. 순서가 정해져있다기 보다는 객체들 간의 상호작용/연결은 언제든 다양한 경우의 수로 일어날 수 있다. 이전으로 돌아갈 수 있다.


  #논의주제4: C 언어에 추가된 기능
답: 2가지
함수중복
참조에 의한 호출